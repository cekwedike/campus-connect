name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest pytest-cov pytest-asyncio httpx
        pip install -r backend/requirements.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check --diff app/
    
    - name: Run tests
      run: |
        cd backend
        pytest tests/test_main.py tests/test_auth_simple.py --cov=app --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run security checks
      run: |
        cd backend
        echo "Running dependency vulnerability scan..."
        safety check --json > safety-report.json || echo "Safety check completed with warnings"
        
        echo "Running code security analysis..."
        bandit -r app/ -f json -o bandit-report.json || echo "Bandit check completed with warnings"
        
        # Ensure report files exist
        if [ ! -f safety-report.json ]; then echo "[]" > safety-report.json; fi
        if [ ! -f bandit-report.json ]; then echo "[]" > bandit-report.json; fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
      if: always()
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        load: true
        tags: campusconnect-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        load: true
        tags: campusconnect-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Verify images
      run: |
        docker images | grep campusconnect
        echo "Backend image size:"
        docker images campusconnect-backend:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo "Frontend image size:"
        docker images campusconnect-frontend:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" 